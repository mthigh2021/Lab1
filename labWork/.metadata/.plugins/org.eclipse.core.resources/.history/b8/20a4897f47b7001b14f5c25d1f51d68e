package classTraining.stackaAndHeap;
/*
 *ALL OBJETS ARE STORED IN HEAP
 *STACK IS USED  FOR STATIC MEMORY ALLOCATION AND THE EXECUTION OF A THREAD
 * STACK IS FAST WHEN COMPARED TO HEAP
 * INCLUDES PRIMITIVES , PRIMITIVES NEVER LEAVE THE STACK (UNLESS ATTACHED TO AN OBJECT
 * THIS IS WHAT MAKES THEM FAST TO WORK WITH  - ESP WRAPPERS  
 * USES LIFO LAST IN FIRST OUT  
 * - NEW METHOD  CALLED -- ADDED AS NEW BLOCK ON TOP OF STACK(CONTAINS VALUES, PRIMITIVE VARIABLES, REFRENCES TO OBJECTS) 
 *  -->> METHOD EXECUTES --> The stack pushes off the block
 * 
 * ##memeory structure 
 * -variables are stored in memeory 
 * - A specific location in memeory is called adn address 
 * - each address  stores a single byte of data 
 * - most variables then occupy multiple address 
 * - the number of address reserved for a single varaible is determined by the variable type
 * - the number of addresses /byte reserved determine value range (binary)
 */
/*Rewferences varaible 
 * -stored the memeory address (or reference) to an object in memeory
 * - objects have to reserve enough memeory to hold all the variables stored for that obejcts 
 * - the memory reserved for an object might contain refrences to other objects, which contain others ..
 * --this confusion and messiness is why java lets us ignore memeory management.
 * -the refrences variable is not the object ...its the door through which the object is accessed
 */

/*
 * java is always pass by value.
 * -with primitives";
 * - java creates a copy of the variable being passed into a method
 * 
 * 
 * 
 */


public class Stack {

	public static void main (String[] args) {
		
		
		int x = 5;
	change(x);
   System.out.println(x);
	    
	}
	
	
	public static void change(int x) {
		x = 10;
	}
	
}
